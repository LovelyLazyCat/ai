import numpy as np

# Use slices to get subarrays.
# Changes to the subarrays will be reflected to the original array
arr = np.array([1, 2, 3, 4, 5, 6])
subarr = arr[0:2]
print("original array = ", arr)
print("subarray = ", subarr)
subarr[1] = 99
print("after chaned subarray, original array = ", arr)

# If do not want to use references to affect the original array,
# can use copy() method to copy the array.
arr = np.array([1, 2, 3, 4, 5, 6])
subarr = arr[1:3].copy()
subarr[1] = 99
print("after chaned copied subarray, original array = ", arr)

# For 2D array, a single index gets an array,
# two indexes get the value.
arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print("original 2D array:")
print(arr)
print("get 2nd line of the array:")
print(arr[1])
print("get (2, 0) element:")
print(arr[2][0])

# Slicing a multidimensional array
print("Get the first two rows of the array:")
print(arr[:2])
print("Get the first two rows and the first two columns of the array:")
print(arr[:2, :2])

print("Get the 2nd line and the first two columns of the array:")
print(arr[1, :2])

# A sperate colon indicates the entire lines or columns:
print("Get all lines and the first two columns of the array:")
print(arr[:, :2])
print("Get all columns and the last two lines of the array:")
print(arr[-2:, :])

# Modify the array by slicing.
arr[:2, :2] = 0
print("After changed array = ")
print(arr)

# You can pass a boolean array in the index to get the value of True.
# Boolean array can be generated by comparing array.
arr1 = np.array(['a', 'b', 'c', 'd', 'e', 'f'])
arr2 = np.array([1, 2, 3, 4, 5, 6])
print("arr1 = ", arr1)
print("arr2 = ", arr2)
print("arr1 == 'a', boolean array = ", arr1 == 'a')
print("Use arr1 == 'a' to the index of arr2 = ", arr2[arr1 == 'a'])
print("Use arr1 != 'a' to the index of arr2 = ", arr2[arr1 != 'a'])

# Use ~ can reverse the condition
print("Use ~(arr1 == 'a'), same as arr1 != 'a' = ", arr2[~(arr1 == 'a')])

# Index can be an array, can select multiple or multiple rows of data
arr = np.empty((8, 4))
for i in range(8):
    arr[i] = i

print("Use [0, 3, 1, 2] as index:")
print(arr[[0, 3, 1, 2]])

# Multiple cell elements can be selected using multiple arrays as index.
arr = np.arange(32).reshape((4, 8))
print("arr = ")
print(arr)
print("Use [0, 1, 1, 2], [4, 5, 1, 7] as index = ")
print(arr[[0, 1, 1, 2], [4, 5, 1, 7]])

